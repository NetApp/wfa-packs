<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<commandDefinition name="Modify Mgmt Interface for a Cluster Node" samplingIntervalInSeconds="60" stringRepresentation="Node + &quot;=&gt;&quot; + OldIPAddress + &quot;=&gt;&quot; + NewIPAddress" timeoutInSeconds="600" type="STANDARD">
    <certification>NONE</certification>
    <uuid>22cf02a4-31c8-4493-ae58-a4b3cc8d43aa</uuid>
    <version>1.0.0</version>
    <command-implementations>
        <command-implementation>
            <command>param (
  [parameter(Mandatory=$true, HelpMessage=&quot;Cluster Name or IP&quot;)]
  [string]$Cluster,

  [parameter(Mandatory=$true, HelpMessage=&quot;Node Name&quot;)]
  [string]$Node,
  
  [parameter(Mandatory=$true, HelpMessage=&quot;IP Address&quot;)]
  [string]$OldIPAddress,

  [parameter(Mandatory=$true, HelpMessage=&quot;IP Address&quot;)]
  [string]$NewIPAddress,

  [parameter(Mandatory=$true, HelpMessage=&quot;Netmask&quot;)]
  [string]$Netmask,

  [parameter(Mandatory=$false, HelpMessage=&quot;Username&quot;)]
  [string]$UserName,

  [parameter(Mandatory=$false, HelpMessage=&quot;Login password. Recommendation is to leave it blank and provide details in WFA credentials&quot;)]
  [Alias(&quot;P_Password&quot;)]
  [string]$Password	
  
)

If(!($UserName) -and !($Password))
{
	throw &quot;Username and Password not provided in command arguments&quot;
}



#Get username and password
    $SecurePassword= Get-WfaInputPassword -EncryptedPassword $Password
    $creds = New-Object System.Management.Automation.PSCredential($UserName,$SecurePassword)
	
Connect-NcController -Name $Cluster -Credential $creds

$interfaces = Get-NcNetInterface -FirewallPolicy mgmt
$found = $false

foreach ( $interface in $interfaces)
		{
			$homeNode = $interface.HomeNode
			$homeIp = $interface.Address
			$intName = $interface.InterfaceName
			$intNetmask = $interface.Netmask
			Get-WfaLogger -Info -Message &quot;Checking IP $homeIp&quot;
			
			if ($homeIp -eq $OldIPAddress)
				{
					$vserver = $interface.Vserver
					Get-WfaLogger -Info -Message &quot;Found IP $OldIPAddress on Node $homeNode Vserver $vserver InterfaceName $intName Gateway $intNetmask&quot;
					$found = $true
					
					Get-WfaLogger -Info -Message &quot;====== Modifying Node mgmt IP from $OldIPAddress to $NewIPAddress ======&quot;
					$newIntIp = ( Set-NcNetInterface -Name $intName -Address $NewIPAddress -Vserver $vserver -Netmask $Netmask ).Address
					
					if($newIntIp)
					{
						$Query = $(&quot;INSERT INTO completed_clusters.node_interface_modified (old_ip, new_ip) VALUES ('$OldIPAddress','$NewIPAddress');&quot;)
						Get-WfaLogger -Info -Message &quot;QUERY: $Query&quot;
						Invoke-MySqlQuery -Query $Query	
						Get-WfaLogger -Info -Message &quot;====== Node mgmt Ip successful modifrom $OldIPAddress to $newIntIp =====&quot;	

						break
					}
				}
		}

if(!$found)
	{
		throw &quot;Node mgmt IP $OldIPAddress not found.&quot;
	}




</command>
            <commandLanguage>POWER_SHELL</commandLanguage>
        </command-implementation>
    </command-implementations>
    <parameter-mappings>
        <parameter-mapping objectName="Cluster" parameterName="Cluster"/>
        <parameter-mapping objectName="Netmask" parameterName="Netmask"/>
        <parameter-mapping objectName="NewIPAddress" parameterName="NewIPAddress"/>
        <parameter-mapping objectName="Node" parameterName="Node"/>
        <parameter-mapping objectName="OldIPAddress" parameterName="OldIPAddress"/>
        <parameter-mapping objectName="Password" parameterName="Password"/>
        <parameter-mapping objectName="UserName" parameterName="UserName"/>
    </parameter-mappings>
    <congruenceTest></congruenceTest>
    <parameter-definitions>
        <parameter-definition description="Cluster Name or IP" isMandatory="true" name="Cluster" type="String">
            <uuid>738c05e9-3d4b-4cb3-9823-aa47a587f8fa</uuid>
        </parameter-definition>
        <parameter-definition description="Netmask" isMandatory="true" name="Netmask" type="String">
            <uuid>8f9abfa9-b1f8-4b70-be81-d3bb3ffa60f5</uuid>
        </parameter-definition>
        <parameter-definition description="IP Address" isMandatory="true" name="NewIPAddress" type="String">
            <uuid>5a571c30-7d02-4652-a2ed-7b93a7c6115a</uuid>
        </parameter-definition>
        <parameter-definition description="Node Name" isMandatory="true" name="Node" type="String">
            <uuid>89bd0a31-d14d-4230-b679-7b3db97b683e</uuid>
        </parameter-definition>
        <parameter-definition description="IP Address" isMandatory="true" name="OldIPAddress" type="String">
            <uuid>ff37ffd9-c38f-4727-96bb-93e04aa0fb8c</uuid>
        </parameter-definition>
        <parameter-definition description="Login password. Recommendation is to leave it blank and provide details in WFA credentials" isMandatory="false" name="Password" type="Password">
            <uuid>c91f4a55-c010-419e-82e5-33bd2b5c62d9</uuid>
        </parameter-definition>
        <parameter-definition description="Username" isMandatory="false" name="UserName" type="String">
            <uuid>0e7471c4-62b0-4103-990e-d69233a002ff</uuid>
        </parameter-definition>
    </parameter-definitions>
    <reservationScript></reservationScript>
    <schemeNames></schemeNames>
</commandDefinition>
